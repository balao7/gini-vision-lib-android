import groovy.xml.StreamingMarkupBuilder

task insertClientCredentials {
    String newClientId
    String newClientSecret

    if (project.hasProperty('clientId')) {
        newClientId = clientId
    }
    if (project.hasProperty('clientSecret')) {
        newClientSecret = clientSecret
    }

    if (newClientId == null || newClientSecret == null) {
        File propertiesFile = file('local.properties')
        if (propertiesFile.exists()) {
            Properties properties = new Properties()
            propertiesFile.withInputStream { instr ->
                properties.load(instr)
            }
            if (newClientId == null) {
                newClientId = properties.get("clientId")
            }
            if (newClientSecret == null) {
                newClientSecret = properties.get("clientSecret")
            }

            if (newClientId == null) {
                throw new IllegalStateException("Missing clientId from ${projectDir}/local.properties.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
            if (newClientSecret == null) {
                throw new IllegalStateException("Missing clientSecret from ${projectDir}/local.properties.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
        } else {
            if (newClientId == null) {
                throw new IllegalStateException("Missing clientId property. Set it with -PclientId.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
            if (newClientSecret == null) {
                throw new IllegalStateException("Missing clientSecret property. Set it with -PclientSecret.\nHint: Either create a ${projectDir}/local.properties file with clientId and clientSecret properties or pass them in as parameters with -PclientId and -PclientSecret.")
            }
        }
    }

    File credentialsFile = file('src/main/res/values/gini_api_credentials.xml')

    def resources = new XmlSlurper().parseText(credentialsFile.text)
    def clientIdStringRes = resources.'*'.find { resource ->
        resource.name() == 'string' && resource.@name == 'gini_api_client_id'
    }
    def clientSecretStringRes = resources.'*'.find { resource ->
        resource.name() == 'string' && resource.@name == 'gini_api_client_secret'
    }

    clientIdStringRes.replaceNode {
        string(name: 'gini_api_client_id', newClientId)
    }
    clientSecretStringRes.replaceNode {
        string(name: 'gini_api_client_secret', newClientSecret)
    }

    credentialsFile.text = new StreamingMarkupBuilder().bind {
        mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
        mkp.yield resources
    }.toString()
}